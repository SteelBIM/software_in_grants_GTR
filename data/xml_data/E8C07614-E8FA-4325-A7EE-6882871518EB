<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.rcuk.ac.uk/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.rcuk.ac.uk:80/organisation/C0E4FAD2-3C8B-410A-B6DF-3B9B9E433060"><gtr:id>C0E4FAD2-3C8B-410A-B6DF-3B9B9E433060</gtr:id><gtr:name>University of St Andrews</gtr:name><gtr:department>Computer Science</gtr:department><gtr:address><gtr:line1>College Gate</gtr:line1><gtr:line4>St. Andrews</gtr:line4><gtr:line5>Fife</gtr:line5><gtr:postCode>KY16 9AJ</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.rcuk.ac.uk:80/organisation/C0E4FAD2-3C8B-410A-B6DF-3B9B9E433060"><gtr:id>C0E4FAD2-3C8B-410A-B6DF-3B9B9E433060</gtr:id><gtr:name>University of St Andrews</gtr:name><gtr:address><gtr:line1>College Gate</gtr:line1><gtr:line4>St. Andrews</gtr:line4><gtr:line5>Fife</gtr:line5><gtr:postCode>KY16 9AJ</gtr:postCode><gtr:region>Scotland</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.rcuk.ac.uk:80/person/64938200-05F9-4BFB-B6E6-066FC2DEA9F4"><gtr:id>64938200-05F9-4BFB-B6E6-066FC2DEA9F4</gtr:id><gtr:firstName>Ian</gtr:firstName><gtr:otherNames>Philip</gtr:otherNames><gtr:surname>Gent</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole><gtr:personRole url="http://gtr.rcuk.ac.uk:80/person/31594C8D-AC91-4AE5-9EC6-02433AB5242E"><gtr:id>31594C8D-AC91-4AE5-9EC6-02433AB5242E</gtr:id><gtr:firstName>Ian</gtr:firstName><gtr:otherNames>James</gtr:otherNames><gtr:surname>Miguel</gtr:surname><gtr:roles><gtr:role><gtr:name>CO_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.rcuk.ac.uk:80/projects?ref=EP%2FE030394%2F1"><gtr:id>E8C07614-E8FA-4325-A7EE-6882871518EB</gtr:id><gtr:title>Watched Literals and Learning for Constraint Programming</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/E030394/1</gtr:grantReference><gtr:abstractText>The following text is rated 67 on the Flesch reading-ease scale, with 60-70 the target for a general audience.Constraints allow us to express many facts in every day life and in puzzles. Think about the recent craze for the Sudoku puzzle. We have to put a number from 1 to 9 in each square of a 9x9 grid. The constraints are that the numbers in each row, column, and 3x3 square must all be different. Researchers in Constraint Programming study how to solve problems like this using computer programs, so that people do not have to solve them themselves. For Sudoku, that might take the fun out of it, but it is less fun scheduling aircraft to arrive at the right gate in a safe and economic way, and the consequences are more serious if you get it wrong. There are many other important problems which Constraint Programming can help with. In this research we will address a number of the most important questions underlying constraint programming. We hope to come up with new answers to old questions, as well as asking new questions which perhaps should have been asked a long time ago. The first question we will look at is how to deduce new facts from old. In constraint programming this is called propagation . In Sudoku, what should you do if you work out that a certain square cannot have a 9 in it? If you can work out any new facts from this, you want to do this as quickly and easily as possible. On the other hand, if there are no new facts to work out, what you'd like to do is nothing! We have recently developed a new way of doing propagation, to give us more chance of doing nothing when there is no chance of working out new facts. The technique is called watched literals . It is obviously better to do nothing instead of something, and so watched literals can make constraint programs run a lot faster. To show the real value of watched literals, we need to do a lot of work on showing how more and more different kinds of constraints can be made to work with them. We also need to understand the general properties of watched literals, to make it easier for us and others to develop new ways to propagate using them. The result should be better constraint programs.The second question we will look at is how to do some of the most basic operations in constraint programming. Some of the tasks we are looking at may take only fractions of a microsecond to do on a modern computer, but we still want to make those fractions as small as possible. To do this, we have to understand in excruciating detail what goes on every time a constraint program does something like checking to see if a number is still allowed to be put in a certain square on the Sudoku grid. Then we have to work out a lot of different ways of doing a simple task like this, build different constraint programs using each way, and perform experiments to see how each one performs. Then we are in a position to tell researchers in constraint programming how the most basic tasks should be done. This kind of work sounds basic, but it is basic in the sense of fundamental. This kind of fundamental research will let us, and everyone else in constraint programming, do their future work better. The third and final question we will look at is how to make constraint programs learn from their own mistakes. Any constraint program makes a lot of mistakes, maybe even billions, before finding the right answer. By learning from the early mistakes, we can get the constraint program to avoid making a lot of the later ones. This idea is very well understood, but has not yet made its way into the fastest constraint programs. The idea of watched literals that we mentioned earlier should marry very well with learning, so we will research how to do this. We think this is the ideal task for a PhD student to work on, building on the research of others while doing their own first piece of world-class research.</gtr:abstractText><gtr:fund><gtr:end>2011-04-01</gtr:end><gtr:funder url="http://gtr.rcuk.ac.uk:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2007-07-02</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>378826</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs><gtr:furtherFundingOutput><gtr:amountPounds>44327</gtr:amountPounds><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>EPSRC</gtr:description><gtr:end>2008-08-02</gtr:end><gtr:fundingOrg>Engineering and Physical Sciences Research Council (EPSRC)</gtr:fundingOrg><gtr:fundingRef>EP/F031114/1</gtr:fundingRef><gtr:id>3AFAA921-694B-4CB0-B254-B15773AAA0BA</gtr:id><gtr:sector>Academic/University</gtr:sector><gtr:start>2008-01-01</gtr:start></gtr:furtherFundingOutput><gtr:furtherFundingOutput><gtr:amountPounds>929076</gtr:amountPounds><gtr:country>United Kingdom of Great Britain &amp; Northern Ireland (UK)</gtr:country><gtr:currCode>GBP</gtr:currCode><gtr:currCountryCode>United Kingdom</gtr:currCountryCode><gtr:currLang>en_GB</gtr:currLang><gtr:description>EPSRC</gtr:description><gtr:end>2014-09-02</gtr:end><gtr:fundingOrg>Engineering and Physical Sciences Research Council (EPSRC)</gtr:fundingOrg><gtr:fundingRef>EP/H004092/1</gtr:fundingRef><gtr:id>A603BA66-50EC-4F12-AC70-970AE41D92B7</gtr:id><gtr:sector>Academic/University</gtr:sector><gtr:start>2009-10-01</gtr:start></gtr:furtherFundingOutput></gtr:furtherFundingOutputs><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>Constraints allow us to express many facts in every day life and in puzzles. Think about the &amp;quot;Sudoku&amp;quot; puzzle. We have to put a number from 1 to 9 in each square of a 9x9 grid. The constraints are that the numbers in each row, column, and 3x3 square must all be different. Researchers in &amp;quot;Constraint Programming&amp;quot; study how to solve problems like this using computer programs. For Sudoku, that might take the fun out of it, but it is less fun scheduling aircraft to arrive at the right gate in a safe and economic way, and the consequences of error are more serious. There are many other important problems which Constraint Programming can help with. We tackled a number of the most important questions underlying constraint programming. 

The first question we looked at is how to deduce new facts from old. This is called &amp;quot;propagation&amp;quot;. In Sudoku, what should you do if you work out that a certain square cannot have a 9 in it? If you can work out any new facts from this, you want to do this as quickly and easily as possible. On the other hand, if there are no new facts to work out, what you'd like to do is nothing! In 2006, we developed a new way of doing propagation, to give us more chance of doing nothing. The technique is called &amp;quot;watched literals&amp;quot;. It is obviously better to do nothing instead of something, and so watched literals can make constraint programs run a lot faster. To show the real value of watched literals, we have shown they can work well in a number of cases. A good example is when we are told only one constraint needs to hold, e.g. we must either land two planes tonight OR two tomorrow. We have worked out general methods for propagating this kind of OR constraint, as well as others like it. Watched literals also come into their own when used with &amp;quot;short supports&amp;quot;, an entirely new kind of propagation technique we have invented during this research.

The second question we looked at is how to do some of the basic operations in constraint programming, even if they were already thought to be well understood. Some of the tasks we are looking at may take only fractions of a microsecond to do on a modern computer, but we still want to make those fractions as small as possible. To do this, we have to explore in excruciating detail what goes on inside constraint solvers. We carried out two major pieces of research we called &amp;quot;empirical surveys&amp;quot;, in which we looked at everything in the literature as well as new ideas. The problems we looked at were how best to do the all different constraint (exactly the one needed for sudoku), and a counting constraint called the generalised cardinality constraint. In both cases we were able to report, in the top journal in our field of Artificial Intelligence, on what the best combination of techniques is. This has not only advanced the state of the art but put it on a much firmer footing. 

The third and final question we looked at to make constraint programs learn from their own mistakes. Any constraint program makes a lot of mistakes, maybe even billions, before finding the right answer. By learning from the early mistakes, we can get the constraint program to avoid making a lot of the later ones. This idea is not new in constraints, but we have advanced its understanding and practice considerably, through the PhD completed by Neil Moore. A key notion is of an explanation for why each propagation happens. We showed how more general explanations can be better, how to implement them efficiently, and how to explain propagations from complicated constraints like all different.</gtr:description><gtr:exploitationPathways>Exploiting our methods for improved search for hard optimisation problems.</gtr:exploitationPathways><gtr:id>5A7D24AD-6055-4140-8622-14579BE5F6DA</gtr:id><gtr:sectors><gtr:sector>Digital/Communication/Information Technologies (including Software),Energy,Financial Services, and Management Consultancy</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/698EDC02-A2D1-401A-A00C-24D8A0B603BF"><gtr:id>698EDC02-A2D1-401A-A00C-24D8A0B603BF</gtr:id><gtr:title>Practical Aspects of Declarative Languages</gtr:title><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/a7ab71aca088b24f77f89e2d001ff0a8"><gtr:id>a7ab71aca088b24f77f89e2d001ff0a8</gtr:id><gtr:otherNames>Gent I</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2010-01-01</gtr:date><gtr:isbn>978-3-642-11502-8</gtr:isbn></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/16AB3876-7BDD-44F8-BF88-5D6A1FB02955"><gtr:id>16AB3876-7BDD-44F8-BF88-5D6A1FB02955</gtr:id><gtr:title>The Extended Global Cardinality Constraint</gtr:title><gtr:parentPublicationTitle>Artificial Intelligence</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/c0759e299ff2f7e1887b24a77534ff14"><gtr:id>c0759e299ff2f7e1887b24a77534ff14</gtr:id><gtr:otherNames>Ian Philip Gent (Author)</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2011-01-01</gtr:date></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/B776380C-9BA1-4419-BBB2-AE48DCA18EB4"><gtr:id>B776380C-9BA1-4419-BBB2-AE48DCA18EB4</gtr:id><gtr:title>Implementing logical connectives in constraint programming</gtr:title><gtr:parentPublicationTitle>Artificial Intelligence</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/2b5f24fe2928226150eb4ab4857fa390"><gtr:id>2b5f24fe2928226150eb4ab4857fa390</gtr:id><gtr:otherNames>Jefferson C</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2010-01-01</gtr:date></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/BEF5DEF4-9C7A-4C3D-9C13-B95EC000C6BE"><gtr:id>BEF5DEF4-9C7A-4C3D-9C13-B95EC000C6BE</gtr:id><gtr:title>Non-binary quantified CSP: algorithms and modelling</gtr:title><gtr:parentPublicationTitle>Constraints</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/e400a79d931d3cda7af6b0d38b3675de"><gtr:id>e400a79d931d3cda7af6b0d38b3675de</gtr:id><gtr:otherNames>Nightingale P</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2009-01-01</gtr:date></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/673D2F20-D867-4A5D-B053-B46D20A178F4"><gtr:id>673D2F20-D867-4A5D-B053-B46D20A178F4</gtr:id><gtr:title>Generating custom propagators for arbitrary constraints</gtr:title><gtr:parentPublicationTitle>Artificial Intelligence</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/a7ab71aca088b24f77f89e2d001ff0a8"><gtr:id>a7ab71aca088b24f77f89e2d001ff0a8</gtr:id><gtr:otherNames>Gent I</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/BF40A008-5038-419E-BA54-6EC16A5463E4"><gtr:id>BF40A008-5038-419E-BA54-6EC16A5463E4</gtr:id><gtr:title>The Extended Global Cardinality Constraint: An Empirical Survey</gtr:title><gtr:parentPublicationTitle>Artificial Intelligence</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/c0759e299ff2f7e1887b24a77534ff14"><gtr:id>c0759e299ff2f7e1887b24a77534ff14</gtr:id><gtr:otherNames>Ian Philip Gent (Author)</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/12E88617-739F-41D8-BD13-4537A64F9D18"><gtr:id>12E88617-739F-41D8-BD13-4537A64F9D18</gtr:id><gtr:title>Implementing logical connectives in constraint programming</gtr:title><gtr:parentPublicationTitle>Artificial Intelligence</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/c0759e299ff2f7e1887b24a77534ff14"><gtr:id>c0759e299ff2f7e1887b24a77534ff14</gtr:id><gtr:otherNames>Ian Philip Gent (Author)</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2013-01-01</gtr:date></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/EAE86410-C5D7-4B1B-9F3F-620D7C16381C"><gtr:id>EAE86410-C5D7-4B1B-9F3F-620D7C16381C</gtr:id><gtr:title>The extended global cardinality constraint: An empirical survey</gtr:title><gtr:parentPublicationTitle>Artificial Intelligence</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/e400a79d931d3cda7af6b0d38b3675de"><gtr:id>e400a79d931d3cda7af6b0d38b3675de</gtr:id><gtr:otherNames>Nightingale P</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2011-01-01</gtr:date></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/E02D8C28-89EF-41E5-B924-B95351611EC9"><gtr:id>E02D8C28-89EF-41E5-B924-B95351611EC9</gtr:id><gtr:title>Generalised arc consistency for the AllDifferent constraint: An empirical survey</gtr:title><gtr:parentPublicationTitle>Artificial Intelligence</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/a7ab71aca088b24f77f89e2d001ff0a8"><gtr:id>a7ab71aca088b24f77f89e2d001ff0a8</gtr:id><gtr:otherNames>Gent I</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2008-01-01</gtr:date></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/F7A19B51-296D-409C-B61D-874BDCE2D9D7"><gtr:id>F7A19B51-296D-409C-B61D-874BDCE2D9D7</gtr:id><gtr:title>Generating custom propagators for arbitrary constraints</gtr:title><gtr:parentPublicationTitle>Artificial Intelligence</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/a7ab71aca088b24f77f89e2d001ff0a8"><gtr:id>a7ab71aca088b24f77f89e2d001ff0a8</gtr:id><gtr:otherNames>Gent I</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2014-01-01</gtr:date></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/A34A0E16-CE84-483E-8227-7E88EF9C6861"><gtr:id>A34A0E16-CE84-483E-8227-7E88EF9C6861</gtr:id><gtr:title>Principles and Practice of Constraint Programming - CP 2009</gtr:title><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/9d3be2d603fc5dd5b82d6e138ae8b348"><gtr:id>9d3be2d603fc5dd5b82d6e138ae8b348</gtr:id><gtr:otherNames>Huczynska S</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2009-01-01</gtr:date><gtr:isbn>978-3-642-04243-0</gtr:isbn></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/267DEF47-37E5-4E09-974A-AB65382C405F"><gtr:id>267DEF47-37E5-4E09-974A-AB65382C405F</gtr:id><gtr:title>Solving quantified constraint satisfaction problems</gtr:title><gtr:parentPublicationTitle>Artificial Intelligence</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/a7ab71aca088b24f77f89e2d001ff0a8"><gtr:id>a7ab71aca088b24f77f89e2d001ff0a8</gtr:id><gtr:otherNames>Gent I</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2008-01-01</gtr:date></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/90034D98-E8A7-4F09-A9CB-08FC9EABF491"><gtr:id>90034D98-E8A7-4F09-A9CB-08FC9EABF491</gtr:id><gtr:title>Modelling Equidistant Frequency Permutation Arrays in Constraints</gtr:title><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/1502e1022496e4ee42ed9fba771a7bd0"><gtr:id>1502e1022496e4ee42ed9fba771a7bd0</gtr:id><gtr:otherNames>Ian P. Gent (Author)</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2009-01-01</gtr:date></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/E030394/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>41593421-CFAC-411D-94A7-E144022B0E6D</gtr:id><gtr:percentage>70</gtr:percentage><gtr:text>Artificial Intelligence</gtr:text></gtr:researchTopic><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>30</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>