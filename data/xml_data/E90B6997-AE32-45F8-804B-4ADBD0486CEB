<?xml version="1.0" encoding="UTF-8"?>
<gtr:projectOverview xmlns:gtr="http://gtr.rcuk.ac.uk/api"><gtr:projectComposition><gtr:collaborations/><gtr:leadResearchOrganisation url="http://gtr.rcuk.ac.uk:80/organisation/D1774113-D5D2-4B7C-A412-66A90FE4B96F"><gtr:id>D1774113-D5D2-4B7C-A412-66A90FE4B96F</gtr:id><gtr:name>University of Cambridge</gtr:name><gtr:department>Computer Laboratory</gtr:department><gtr:address><gtr:line1>Lensfield Road</gtr:line1><gtr:line4>Cambridge</gtr:line4><gtr:postCode>CB2 1EW</gtr:postCode><gtr:region>East of England</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:typeInd>RO</gtr:typeInd></gtr:leadResearchOrganisation><gtr:organisationRoles><gtr:organisationRole url="http://gtr.rcuk.ac.uk:80/organisation/D1774113-D5D2-4B7C-A412-66A90FE4B96F"><gtr:id>D1774113-D5D2-4B7C-A412-66A90FE4B96F</gtr:id><gtr:name>University of Cambridge</gtr:name><gtr:address><gtr:line1>Lensfield Road</gtr:line1><gtr:line4>Cambridge</gtr:line4><gtr:postCode>CB2 1EW</gtr:postCode><gtr:region>East of England</gtr:region><gtr:country>United Kingdom</gtr:country></gtr:address><gtr:roles><gtr:role><gtr:name>LEAD_RO</gtr:name></gtr:role></gtr:roles></gtr:organisationRole></gtr:organisationRoles><gtr:personRoles><gtr:personRole url="http://gtr.rcuk.ac.uk:80/person/F0BBAD86-970F-4BA2-BBA0-5407650D2327"><gtr:id>F0BBAD86-970F-4BA2-BBA0-5407650D2327</gtr:id><gtr:firstName>Magnus</gtr:firstName><gtr:otherNames>Oskar</gtr:otherNames><gtr:surname>Myreen</gtr:surname><gtr:roles><gtr:role><gtr:name>RESEARCHER_COI</gtr:name></gtr:role></gtr:roles></gtr:personRole><gtr:personRole url="http://gtr.rcuk.ac.uk:80/person/371F6B6C-B53D-4330-AB87-DD1B601638B7"><gtr:id>371F6B6C-B53D-4330-AB87-DD1B601638B7</gtr:id><gtr:firstName>Mike</gtr:firstName><gtr:surname>Gordon</gtr:surname><gtr:roles><gtr:role><gtr:name>PRINCIPAL_INVESTIGATOR</gtr:name></gtr:role></gtr:roles></gtr:personRole></gtr:personRoles><gtr:project url="http://gtr.rcuk.ac.uk:80/projects?ref=EP%2FG007411%2F1"><gtr:id>E90B6997-AE32-45F8-804B-4ADBD0486CEB</gtr:id><gtr:title>Trustworthy programming for multiple instruction sets</gtr:title><gtr:status>Closed</gtr:status><gtr:grantCategory>Research Grant</gtr:grantCategory><gtr:grantReference>EP/G007411/1</gtr:grantReference><gtr:abstractText>The rapidly growing use of microprocessors in devices containing sensitive data (e.g. phones) and safety-critical systems (e.g. automobiles, avionics) is increasing the value of trustworthy software. Assembly code is particularly error-prone as it varies from processor to processor and even between different versions of processors in the same family. Some software must be implemented directly in assembler, such as run-time system components (e.g. storage management), performance-critical operations (e.g. arithmetic) and parts of operating systems (e.g. interrupt controllers). One cannot avoid having to create at least some coderunning on bare metal .Our goal is to develop a new programming methodology for creating trustworthy assembly code software. The project has two parts: 1. bottom-up creation of certified code components using proof-producing decompilation of assembly code into mathematical function definitions; 2. top-down compilation of certified implementations from mathematical function definitionsThe certification aspects are novel: they consist of automatically proving a new kind of processor-specific formal specification.Unlike other recent work on certified assembly code, we aim to go beyond establishing weak safety properties and instead handle functional correctness, termination and resource usage. We aim to generate deep proofs using very accurate ISA models. Our goals are complementary to the relatively shallow analyses based on the simplified semantics that underlie current industrial-scale bug-finding formal software verification tools.Our methods are not tied to a particular instruction set. Initially we will work with two instruction sets: ARM and a subset of IA-32, both of which are very widely used. We already have access to formal specifications of these.We aim to conduct diverse and realistic case studies, including multi-word arithmetic as used in cryptography and storage allocation and management routines used for runtime support of compiled code. Towards the end of the project we hope to verify a complete interpreter for a simple language based on pure LISP supporting high precision arithmetic -- a first step towards creating verified implementations of functional languages on bare metal.A long-term application, probably beyond the scope of this project, is creating certified run-time code for real domain-specific functional languages. A motivating example is the Haskell-based Cryptol language, which is used for specifying cryptographic algorithms.We plan to recruit a PhD student to explore the feasibility of creating verified operating systems components such as drivers, networking software, software-hardware interfaces, boot loaders and virtualisation support. This will require modelling parts of the hardware environment. Verifying a complete operating system is likely to be too much for a single PhD student, but we intend to collaborate with students at the University of Utah.</gtr:abstractText><gtr:fund><gtr:end>2012-03-31</gtr:end><gtr:funder url="http://gtr.rcuk.ac.uk:80/organisation/798CB33D-C79E-4578-83F2-72606407192C"><gtr:id>798CB33D-C79E-4578-83F2-72606407192C</gtr:id><gtr:name>EPSRC</gtr:name></gtr:funder><gtr:start>2008-10-01</gtr:start><gtr:type>INCOME_ACTUAL</gtr:type><gtr:valuePounds>362466</gtr:valuePounds></gtr:fund><gtr:output><gtr:artisticAndCreativeProductOutputs/><gtr:collaborationOutputs/><gtr:disseminationOutputs/><gtr:exploitationOutputs/><gtr:furtherFundingOutputs/><gtr:impactSummaryOutputs/><gtr:intellectualPropertyOutputs/><gtr:keyFindingsOutput><gtr:description>Our main finding is that decmopilation into logic, i.e. automatic

extraction of tractable models from realistically modelled machine

code, is possible even for large programs. This technique can be used

for post hoc verification of existing code and also for synthesis of

code that is correct by construction.</gtr:description><gtr:exploitationPathways>See &amp;quot;Exploitation routes&amp;quot; Our technique for decompilation into logic is already being used: the

National ICT of Australia uses it in the verification of the seL4 microkernel

(as part of the L4.verified project), Rockwell Collins (a large

aerospace and defense company in the US) uses it, and there is

currently an MoD project exploring how this might benefit the MoD.</gtr:exploitationPathways><gtr:id>FA745C91-E775-4DC2-8FAD-AAF451901F1A</gtr:id><gtr:sectors><gtr:sector>Aerospace, Defence and Marine,Digital/Communication/Information Technologies (including Software)</gtr:sector></gtr:sectors></gtr:keyFindingsOutput><gtr:otherResearchOutputs/><gtr:policyInfluenceOutputs/><gtr:productOutputs/><gtr:researchDatabaseAndModelOutputs/><gtr:researchMaterialOutputs/><gtr:softwareAndTechnicalProductOutputs/><gtr:spinOutOutputs/></gtr:output><gtr:publications><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/BCAA83CC-30E3-403E-BB8D-DAF904A0330D"><gtr:id>BCAA83CC-30E3-403E-BB8D-DAF904A0330D</gtr:id><gtr:title>Proof-producing synthesis of ML from higher-order logic</gtr:title><gtr:parentPublicationTitle>ACM SIGPLAN Notices</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/08f90e4f43e489d33ba86da4626e7cb2"><gtr:id>08f90e4f43e489d33ba86da4626e7cb2</gtr:id><gtr:otherNames>Myreen M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2012-01-01</gtr:date></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/F96B56C5-253F-4108-A835-F7712BBABAD2"><gtr:id>F96B56C5-253F-4108-A835-F7712BBABAD2</gtr:id><gtr:title>Machine-Code Verification for Multiple Architectures - An Application of Decompilation into Logic</gtr:title><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/08f90e4f43e489d33ba86da4626e7cb2"><gtr:id>08f90e4f43e489d33ba86da4626e7cb2</gtr:id><gtr:otherNames>Myreen M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2008-01-01</gtr:date><gtr:isbn>978-1-4244-2735-2</gtr:isbn></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/F62DCCA9-99C4-4528-B28D-BD10613027D5"><gtr:id>F62DCCA9-99C4-4528-B28D-BD10613027D5</gtr:id><gtr:title>Interactive Theorem Proving</gtr:title><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/36df74dec94cc65cc1047ffd3f41edce"><gtr:id>36df74dec94cc65cc1047ffd3f41edce</gtr:id><gtr:otherNames>Fox A</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2010-01-01</gtr:date><gtr:isbn>978-3-642-14051-8</gtr:isbn></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/92A30E39-65DA-4FE3-991F-77409026D987"><gtr:id>92A30E39-65DA-4FE3-991F-77409026D987</gtr:id><gtr:title>Function extraction</gtr:title><gtr:parentPublicationTitle>Science of Computer Programming</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/08f90e4f43e489d33ba86da4626e7cb2"><gtr:id>08f90e4f43e489d33ba86da4626e7cb2</gtr:id><gtr:otherNames>Myreen M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2012-01-01</gtr:date></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/F6708051-4746-49E6-B18A-CC4C400B4E9F"><gtr:id>F6708051-4746-49E6-B18A-CC4C400B4E9F</gtr:id><gtr:title>Interactive Theorem Proving</gtr:title><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/08f90e4f43e489d33ba86da4626e7cb2"><gtr:id>08f90e4f43e489d33ba86da4626e7cb2</gtr:id><gtr:otherNames>Myreen M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2010-01-01</gtr:date><gtr:isbn>978-3-642-14051-8</gtr:isbn></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/8100CF73-8485-46F4-874A-9354B484B7EF"><gtr:id>8100CF73-8485-46F4-874A-9354B484B7EF</gtr:id><gtr:title>Compiler Construction</gtr:title><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/08f90e4f43e489d33ba86da4626e7cb2"><gtr:id>08f90e4f43e489d33ba86da4626e7cb2</gtr:id><gtr:otherNames>Myreen M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2009-01-01</gtr:date><gtr:isbn>978-3-642-00721-7</gtr:isbn></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/6F4631FE-64BE-49C5-ABDF-70B099B5E635"><gtr:id>6F4631FE-64BE-49C5-ABDF-70B099B5E635</gtr:id><gtr:title>Theorem Proving in Higher Order Logics</gtr:title><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/08f90e4f43e489d33ba86da4626e7cb2"><gtr:id>08f90e4f43e489d33ba86da4626e7cb2</gtr:id><gtr:otherNames>Myreen M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2009-01-01</gtr:date><gtr:isbn>978-3-642-03358-2</gtr:isbn></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/986ACC57-91EF-40F0-AD04-B73679BE0879"><gtr:id>986ACC57-91EF-40F0-AD04-B73679BE0879</gtr:id><gtr:title>x86-TSO</gtr:title><gtr:parentPublicationTitle>Communications of the ACM</gtr:parentPublicationTitle><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/1bfc3eca6956b75c7b0788148e2c84ae"><gtr:id>1bfc3eca6956b75c7b0788148e2c84ae</gtr:id><gtr:otherNames>Sewell P</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2010-01-01</gtr:date></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/8CB79BF4-D948-4BD0-B0A4-E5A0192AFE7C"><gtr:id>8CB79BF4-D948-4BD0-B0A4-E5A0192AFE7C</gtr:id><gtr:title>The semantics of x86-CC multiprocessor machine code</gtr:title><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/caf3d032b5e39560b0be5e4330259686"><gtr:id>caf3d032b5e39560b0be5e4330259686</gtr:id><gtr:otherNames>Sarkar S</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2008-01-01</gtr:date><gtr:isbn>9781605583792</gtr:isbn></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/813EB23E-A70A-495C-938E-98A485577534"><gtr:id>813EB23E-A70A-495C-938E-98A485577534</gtr:id><gtr:title>The semantics of power and ARM multiprocessor machine code</gtr:title><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/ea74d38041eb38981c3c69c1d5ce0723"><gtr:id>ea74d38041eb38981c3c69c1d5ce0723</gtr:id><gtr:otherNames>Alglave J</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2008-01-01</gtr:date><gtr:isbn>9781605584171</gtr:isbn></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/A63A851D-AAAA-4C39-AB3F-38A4064A2313"><gtr:id>A63A851D-AAAA-4C39-AB3F-38A4064A2313</gtr:id><gtr:title>Interactive Theorem Proving</gtr:title><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/08f90e4f43e489d33ba86da4626e7cb2"><gtr:id>08f90e4f43e489d33ba86da4626e7cb2</gtr:id><gtr:otherNames>Myreen M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2011-01-01</gtr:date><gtr:isbn>978-3-642-22862-9</gtr:isbn></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/F674288D-7FEF-4BB5-B354-47EBAB1D84C4"><gtr:id>F674288D-7FEF-4BB5-B354-47EBAB1D84C4</gtr:id><gtr:title>Interactive Theorem Proving</gtr:title><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/08f90e4f43e489d33ba86da4626e7cb2"><gtr:id>08f90e4f43e489d33ba86da4626e7cb2</gtr:id><gtr:otherNames>Myreen M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2012-01-01</gtr:date><gtr:isbn>978-3-642-32346-1</gtr:isbn></gtr:publication><gtr:publication url="http://gtr.rcuk.ac.uk:80/publication/E4E75748-744E-4DE2-A7FB-2DCDF5A04503"><gtr:id>E4E75748-744E-4DE2-A7FB-2DCDF5A04503</gtr:id><gtr:title>Verified Software: Theories, Tools, Experiments</gtr:title><gtr:authors><gtr:author url="http://gtr.rcuk.ac.uk:80/person/08f90e4f43e489d33ba86da4626e7cb2"><gtr:id>08f90e4f43e489d33ba86da4626e7cb2</gtr:id><gtr:otherNames>Myreen M</gtr:otherNames></gtr:author></gtr:authors><gtr:date>2010-01-01</gtr:date><gtr:isbn>978-3-642-15056-2</gtr:isbn></gtr:publication></gtr:publications><gtr:identifiers><gtr:identifier type="RCUK">EP/G007411/1</gtr:identifier></gtr:identifiers><gtr:healthCategories/><gtr:researchActivities/><gtr:researchSubjects><gtr:researchSubject><gtr:id>EB5F16BB-2772-4DDE-BD6C-3B7A6914B64C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Info. &amp; commun. Technol.</gtr:text></gtr:researchSubject></gtr:researchSubjects><gtr:researchTopics><gtr:researchTopic><gtr:id>76783275-A9F8-4B4E-B314-51363124259C</gtr:id><gtr:percentage>100</gtr:percentage><gtr:text>Fundamentals of Computing</gtr:text></gtr:researchTopic></gtr:researchTopics><gtr:rcukProgrammes/></gtr:project></gtr:projectComposition></gtr:projectOverview>